/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from '@payloadcms/db-postgres'
import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  serial,
  timestamp,
  varchar,
  numeric,
  integer,
  jsonb,
  pgEnum,
} from '@payloadcms/db-postgres/drizzle/pg-core'
import { sql, relations } from '@payloadcms/db-postgres/drizzle'
export const enum_investment_transaction_type = pgEnum('enum_investment_transaction_type', [
  'buy',
  'sell',
])
export const enum_investment_recommendation_buy_sell_hold_recommendation = pgEnum(
  'enum_investment_recommendation_buy_sell_hold_recommendation',
  ['buy', 'sell', 'hold'],
)

export const users = pgTable(
  'users',
  {
    id: serial('id').primaryKey(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
  }),
)

export const media = pgTable(
  'media',
  {
    id: serial('id').primaryKey(),
    alt: varchar('alt').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
  },
  (columns) => ({
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
  }),
)

export const company_bull_case = pgTable(
  'company_bull_case',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    opinionText: varchar('opinion_text').notNull(),
    opinionDate: timestamp('opinion_date', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
  },
  (columns) => ({
    _orderIdx: index('company_bull_case_order_idx').on(columns._order),
    _parentIDIdx: index('company_bull_case_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [company.id],
      name: 'company_bull_case_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const company_bear_case = pgTable(
  'company_bear_case',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    opinionText: varchar('opinion_text').notNull(),
    opinionDate: timestamp('opinion_date', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
  },
  (columns) => ({
    _orderIdx: index('company_bear_case_order_idx').on(columns._order),
    _parentIDIdx: index('company_bear_case_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [company.id],
      name: 'company_bear_case_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const company = pgTable(
  'company',
  {
    id: serial('id').primaryKey(),
    name: varchar('name').notNull(),
    ticker: varchar('ticker').notNull(),
    recommendationDate: timestamp('recommendation_date', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    priceTarget: numeric('price_target'),
    currentPrice: numeric('current_price'),
    timeframe: varchar('timeframe'),
    ytdReturn: numeric('ytd_return'),
    weekToDateReturn: numeric('week_to_date_return'),
    oneYearReturn: numeric('one_year_return'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    company_updated_at_idx: index('company_updated_at_idx').on(columns.updatedAt),
    company_created_at_idx: index('company_created_at_idx').on(columns.createdAt),
  }),
)

export const investment = pgTable(
  'investment',
  {
    id: serial('id').primaryKey(),
    investor: integer('investor_id')
      .notNull()
      .references(() => users.id, {
        onDelete: 'set null',
      }),
    company: integer('company_id')
      .notNull()
      .references(() => company.id, {
        onDelete: 'set null',
      }),
    transactionType: enum_investment_transaction_type('transaction_type').notNull(),
    investmentDate: timestamp('investment_date', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    shares: numeric('shares').notNull(),
    pricePerShare: numeric('price_per_share').notNull(),
    notes: varchar('notes'),
    displayTitle: varchar('display_title'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    investment_investor_idx: index('investment_investor_idx').on(columns.investor),
    investment_company_idx: index('investment_company_idx').on(columns.company),
    investment_updated_at_idx: index('investment_updated_at_idx').on(columns.updatedAt),
    investment_created_at_idx: index('investment_created_at_idx').on(columns.createdAt),
  }),
)

export const investment_recommendation = pgTable(
  'investment_recommendation',
  {
    id: serial('id').primaryKey(),
    investor: integer('investor_id')
      .notNull()
      .references(() => investors.id, {
        onDelete: 'set null',
      }),
    company: integer('company_id')
      .notNull()
      .references(() => company.id, {
        onDelete: 'set null',
      }),
    recommendationDate: timestamp('recommendation_date', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }).notNull(),
    buySellHoldRecommendation: enum_investment_recommendation_buy_sell_hold_recommendation(
      'buy_sell_hold_recommendation',
    ).notNull(),
    recommendationReasoning: varchar('recommendation_reasoning').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    investment_recommendation_investor_idx: index('investment_recommendation_investor_idx').on(
      columns.investor,
    ),
    investment_recommendation_company_idx: index('investment_recommendation_company_idx').on(
      columns.company,
    ),
    investment_recommendation_updated_at_idx: index('investment_recommendation_updated_at_idx').on(
      columns.updatedAt,
    ),
    investment_recommendation_created_at_idx: index('investment_recommendation_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const investors = pgTable(
  'investors',
  {
    id: serial('id').primaryKey(),
    email: varchar('email').notNull(),
    firstName: varchar('first_name'),
    lastName: varchar('last_name'),
    password: varchar('password').notNull(),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    investors_email_idx: uniqueIndex('investors_email_idx').on(columns.email),
    investors_updated_at_idx: index('investors_updated_at_idx').on(columns.updatedAt),
    investors_created_at_idx: index('investors_created_at_idx').on(columns.createdAt),
  }),
)

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: serial('id').primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
    mediaID: integer('media_id'),
    companyID: integer('company_id'),
    investmentID: integer('investment_id'),
    investmentRecommendationID: integer('investment_recommendation_id'),
    investorsID: integer('investors_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_media_id_idx: index(
      'payload_locked_documents_rels_media_id_idx',
    ).on(columns.mediaID),
    payload_locked_documents_rels_company_id_idx: index(
      'payload_locked_documents_rels_company_id_idx',
    ).on(columns.companyID),
    payload_locked_documents_rels_investment_id_idx: index(
      'payload_locked_documents_rels_investment_id_idx',
    ).on(columns.investmentID),
    payload_locked_documents_rels_investment_recommendation_id_idx: index(
      'payload_locked_documents_rels_investment_recommendation_id_idx',
    ).on(columns.investmentRecommendationID),
    payload_locked_documents_rels_investors_id_idx: index(
      'payload_locked_documents_rels_investors_id_idx',
    ).on(columns.investorsID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    companyIdFk: foreignKey({
      columns: [columns['companyID']],
      foreignColumns: [company.id],
      name: 'payload_locked_documents_rels_company_fk',
    }).onDelete('cascade'),
    investmentIdFk: foreignKey({
      columns: [columns['investmentID']],
      foreignColumns: [investment.id],
      name: 'payload_locked_documents_rels_investment_fk',
    }).onDelete('cascade'),
    investmentRecommendationIdFk: foreignKey({
      columns: [columns['investmentRecommendationID']],
      foreignColumns: [investment_recommendation.id],
      name: 'payload_locked_documents_rels_investment_recommendation_fk',
    }).onDelete('cascade'),
    investorsIdFk: foreignKey({
      columns: [columns['investorsID']],
      foreignColumns: [investors.id],
      name: 'payload_locked_documents_rels_investors_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: serial('id').primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const relations_users = relations(users, () => ({}))
export const relations_media = relations(media, () => ({}))
export const relations_company_bull_case = relations(company_bull_case, ({ one }) => ({
  _parentID: one(company, {
    fields: [company_bull_case._parentID],
    references: [company.id],
    relationName: 'bullCase',
  }),
}))
export const relations_company_bear_case = relations(company_bear_case, ({ one }) => ({
  _parentID: one(company, {
    fields: [company_bear_case._parentID],
    references: [company.id],
    relationName: 'bearCase',
  }),
}))
export const relations_company = relations(company, ({ many }) => ({
  bullCase: many(company_bull_case, {
    relationName: 'bullCase',
  }),
  bearCase: many(company_bear_case, {
    relationName: 'bearCase',
  }),
}))
export const relations_investment = relations(investment, ({ one }) => ({
  investor: one(users, {
    fields: [investment.investor],
    references: [users.id],
    relationName: 'investor',
  }),
  company: one(company, {
    fields: [investment.company],
    references: [company.id],
    relationName: 'company',
  }),
}))
export const relations_investment_recommendation = relations(
  investment_recommendation,
  ({ one }) => ({
    investor: one(investors, {
      fields: [investment_recommendation.investor],
      references: [investors.id],
      relationName: 'investor',
    }),
    company: one(company, {
      fields: [investment_recommendation.company],
      references: [company.id],
      relationName: 'company',
    }),
  }),
)
export const relations_investors = relations(investors, () => ({}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    companyID: one(company, {
      fields: [payload_locked_documents_rels.companyID],
      references: [company.id],
      relationName: 'company',
    }),
    investmentID: one(investment, {
      fields: [payload_locked_documents_rels.investmentID],
      references: [investment.id],
      relationName: 'investment',
    }),
    investmentRecommendationID: one(investment_recommendation, {
      fields: [payload_locked_documents_rels.investmentRecommendationID],
      references: [investment_recommendation.id],
      relationName: 'investmentRecommendation',
    }),
    investorsID: one(investors, {
      fields: [payload_locked_documents_rels.investorsID],
      references: [investors.id],
      relationName: 'investors',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))

type DatabaseSchema = {
  enum_investment_transaction_type: typeof enum_investment_transaction_type
  enum_investment_recommendation_buy_sell_hold_recommendation: typeof enum_investment_recommendation_buy_sell_hold_recommendation
  users: typeof users
  media: typeof media
  company_bull_case: typeof company_bull_case
  company_bear_case: typeof company_bear_case
  company: typeof company
  investment: typeof investment
  investment_recommendation: typeof investment_recommendation
  investors: typeof investors
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  relations_users: typeof relations_users
  relations_media: typeof relations_media
  relations_company_bull_case: typeof relations_company_bull_case
  relations_company_bear_case: typeof relations_company_bear_case
  relations_company: typeof relations_company
  relations_investment: typeof relations_investment
  relations_investment_recommendation: typeof relations_investment_recommendation
  relations_investors: typeof relations_investors
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
}

declare module '@payloadcms/db-postgres' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
